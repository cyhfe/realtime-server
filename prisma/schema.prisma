// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name chat
// npx prisma generate
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  role      String   @default("MEMBER")
  username  String   @unique
  password  String
  avatar    String

  channelMessages ChannelMessage[]
  channels        Channel[]

  sendMessages    PrivateMessage[] @relation("sendMessages")
  recieveMessages PrivateMessage[] @relation("recieveMessages")
  conversations   Conversation[]
}

model ChannelMessage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  fromUserId  String
  from        User     @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  toChannelId String
  to          Channel  @relation(fields: [toChannelId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
  content     String
}

model Channel {
  id        String           @id @default(uuid())
  name      String           @unique
  createdAt DateTime         @default(now())
  userId    String
  belongsTo User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChannelMessage[]
}

model PrivateMessage {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  fromUserId String
  from       User     @relation("sendMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   String
  to         User     @relation("recieveMessages", fields: [toUserId], references: [id], onDelete: Cascade)
  content    String
}

model AiMessage {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  role           String
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  name      String
  aiMessage AiMessage[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
