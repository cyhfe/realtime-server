// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name chat
// npx prisma generate
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  role            String           @default("MEMBER")
  username        String           @unique
  password        String
  channelMessages ChannelMessage[]
  channels        Channel[]

  privateRoom     PrivateRoom?
  privateMessages PrivateMessage[]
}

model ChannelMessage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  fromUserId  String
  from        User     @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  toChannelId String
  to          Channel  @relation(fields: [toChannelId], references: [id], onDelete: Cascade)
  read        Boolean  @default(false)
  content     String
}

model Channel {
  id           String           @id @default(uuid())
  name         String           @unique
  createdAt    DateTime         @default(now())
  userId       String
  belongsTo    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     ChannelMessage[]
  channelBoard ChannelBoard?
}

model PrivateMessage {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  fromUserId String
  from       User        @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   String
  to         PrivateRoom @relation(fields: [toUserId], references: [userId], onDelete: Cascade)
  content    String
}

model PrivateRoom {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  userId          String           @unique
  belongsTo       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  privateMessages PrivateMessage[]
  privateBoard    PrivateBoard?
}

model ChannelBoard {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  channelId      String          @unique
  channel        Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)
  history        Int             @default(0)
  channelStrokes ChannelStroke[]
}

model ChannelStroke {
  id             String         @id @default(uuid())
  points         ChannelPoint[]
  channelBoardId String
  channelBoard   ChannelBoard   @relation(fields: [channelBoardId], references: [id], onDelete: Cascade)
}

model ChannelPoint {
  id            String        @id @default(uuid())
  x             Int
  y             Int
  strokeId      String
  channelStroke ChannelStroke @relation(fields: [strokeId], references: [id], onDelete: Cascade)
}

model PrivateBoard {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  privateRoomId  String          @unique
  privateRoom    PrivateRoom     @relation(fields: [privateRoomId], references: [id], onDelete: Cascade)
  history        Int             @default(0)
  privateStrokes PrivateStroke[]
}

model PrivateStroke {
  id             String         @id @default(uuid())
  points         PrivatePoint[]
  privateBoardId String
  privateBoard   PrivateBoard   @relation(fields: [privateBoardId], references: [id], onDelete: Cascade)
}

model PrivatePoint {
  id            String        @id @default(uuid())
  x             Int
  y             Int
  strokeId      String
  privateStroke PrivateStroke @relation(fields: [strokeId], references: [id], onDelete: Cascade)
}
